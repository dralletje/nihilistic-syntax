:root {
  --color-for-value: rgba(86, 173, 154, 0.82);
  --color-for-local-variable: rgb(247, 132, 22);
  --color-for-symbol: rgb(221, 0, 0);
  --color-for-important-keyword: #ccc;
  --color-for-comment: #777777;

  --opacity-for-punctuation: 0.4;
  --color-for-information: #dc00ff; // TODO and NOTE
}

atom-text-editor {
  color: var(--color-for-local-variable);
  // background-color: @syntax-background-color;
  // color: @syntax-text-color;

  // .wrap-guide {
  //   background-color: @syntax-wrap-guide-color;
  // }
  //
  // .indent-guide {
  //   color: @syntax-indent-guide-color;
  // }
  //
  // .invisible-character {
  //   color: @syntax-invisible-character-color;
  // }

  .gutter {
    // background-color: @syntax-gutter-background-color;
    // color: @syntax-gutter-text-color;

    // .line-number {
    //   &.cursor-line {
    //     background-color: @syntax-gutter-background-color-selected;
    //     color: @syntax-gutter-text-color-selected;
    //   }
    //
    //   &.cursor-line-no-selection {
    //     color: @syntax-gutter-text-color-selected;
    //   }
    // }
  }

  // .gutter .line-number.folded,
  // .gutter .line-number:after,
  // .fold-marker:after {
  //   color: @light-gray;
  // }

  // .invisible {
  //   color: @syntax-text-color;
  // }
  //
  // .cursor {
  //   color: @syntax-cursor-color;
  // }

  .selection .region {
    background-color: lighten(#282a2e, 10%);
  }
}

// Syntax styles
// .syntax--source, {
//   color: var(--color-for-local-variable);
// }

.syntax--line .syntax--comment,
.syntax--comment {
  opacity: 1 !important;
  color: var(--color-for-comment);
}

.syntax--markup.syntax--heading {
  color: var(--color-for-symbol);
}

// TODO Unsure about these... Scope them all to markdown?
.syntax--gfm.syntax--list,
.syntax--marker,
.syntax--hr {
  opacity: var(--opacity-for-punctuation);
}

.syntax--quoted,
.syntax--property-value,
.syntax--numeric,
.syntax--boolean,
.syntax--regexp,
.syntax--constant, // TODO Experimental
.syntax--language.syntax--constant /* true, false, null */ {
  color: var(--color-for-value);
}
.syntax--regexp * {
  color: var(--color-for-value) !important;
}
.syntax--meta.syntax--property-value * {
  color: var(--color-for-value) !important;
}

// These are local variables: the only reason they are called this,
// is because we called them like it (private-ish)
.syntax--object,
.syntax--variable,
// .syntax--definition,
.syntax--entity,
.syntax--primitive,
.syntax--component,
.syntax--variable.syntax--constant {
  // color: red;
  color: var(--color-for-local-variable);
}

// These are property names: names that can be specific to libraries,
// or define our public interface (public-ish)
.syntax--property,
.syntax--property-name,
.syntax--key,
.syntax--hashkey,
.syntax--key .syntax--string,
.syntax--method.syntax--name,
.syntax--meta.syntax--method-call > .syntax--entity,
.syntax--support.syntax--function,
.syntax--storage.syntax--function,
.syntax--attribute-name.syntax--jsx {
  color: var(--color-for-symbol);
}

.syntax--storage.syntax--function {
  opacity: 1;
}

.syntax--builtin,
.syntax--dom,
.syntax--console,
.syntax--process,
.syntax--language.syntax--variable /* this */ {
  opacity: 1;

  // color: var(--color-for-symbol);
  color: var(--color-for-local-variable);

  text-decoration: underline;
  text-decoration-color: rgba(255,255,255,.2);
  text-decoration-skip: ink;
}
// EXPERIMENTALLY make `this` (and others? Check?) bold - extra clear they are special
.syntax--language.syntax--variable {
  font-weight: bold;
}

.syntax--bold {
  font-weight: bold;
}
.syntax--italic {
  font-style: italic;
}
.syntax--underline {
  text-decoration: underline;
}

.syntax--todo,
.syntax--note {
  color: var(--color-for-information);
}

.syntax--control,
.syntax--storage,
.syntax--keyword,
.syntax--punctuation,
.syntax--brace,
.syntax--delimiter,
.syntax--comma {
  opacity: var(--opacity-for-punctuation);

  // This makes sure that it will not apply the reduced opacity multiple times (and multiplying the effect)
  & * {
    opacity: 1 !important;
  }
}

// Two (for now) exceptions to the keyword dimming:
.syntax--keyword.syntax--comparison, // ===, ==, <, !==, etc
.syntax--keyword.syntax--arithmetic  // +, -, *, /
{
    color: var(--color-for-symbol);
    opacity: 1;
}

.syntax--assignment.syntax--keyword,
.syntax--assignment.syntax--operator,
.syntax--control,
.syntax--ternary,
.syntax--logical {
  opacity: 1;
  color: var(--color-for-important-keyword);
}


// NOTE Exceptions for JSX
.syntax--jsx.syntax--assignment {
  opacity: var(--opacity-for-punctuation);
  color: inherit; // So it takes tag color, instead of white
}
.syntax--jsx.syntax--tag {
  color: var(--color-for-local-variable);
}
.syntax--jsx.syntax--tag.syntax--name {
  color: var(--color-for-symbol);
}
.syntax--JSXNested {
  color: var(--color-for-value);
  .syntax--embedded {
    color: var(--color-for-local-variable);
  }
}

// JAVASCRIPT EXCEPTIONS
.syntax--js {
  // The syntax thing treats functions in a different way:
  // Things that are assigned functions (properties in objects, mostly) are not consider
  // "things on an object" like all the other properties on an object, but it makes them
  // indistiguisable from "functions" in the code. To fix that:
  // 1. In object notation, functions are forced back to be properties
  .syntax--json.syntax--function > .syntax--entity {
    color: var(--color-for-symbol);
  }
  // 2. Every thing next to an `.` (.syntax--accessor) becomes a forced property
  .syntax--accessor + *:not(.syntax--meta) {
    color: var(--color-for-symbol);
  }

  // Object spread gets tagged as if it is a property ...
  .syntax--spread + .syntax--property > .syntax--property {
    color: var(--color-for-local-variable);
  }
}

// HTML EXCEPTIONS
.syntax--html {
  .syntax--attribute-name {
    color: var(--color-for-symbol);
  }
}

// GRAPHQL EXCEPTIONS
.syntax--graphql {
  // If we are defining the type, I want all "variables"
  // to be local variables: we are the ones that are defining the interface now
  .syntax--type {
    color: var(--color-for-symbol);
  }

  &.syntax--meta.syntax--type {
    color: var(--color-for-local-variable);

    .syntax--variable {
      color: var(--color-for-local-variable);
    }
    .syntax--type {
      color: var(--color-for-local-variable);
    }
    .syntax--object {
      color: var(--color-for-value);
      & > * {
        color: var(--color-for-local-variable);
      }
    }
    .syntax--builtin {
      color: var(--color-for-symbol);
    }

    .syntax--comment {
      color: var(--color-for-comment);
    }
  }

  .syntax--support.syntax--type + .syntax--support.syntax--type,
  .syntax--support.syntax--type:nth-child(2) {
      color: var(--color-for-value);
  }

  &.syntax--type.syntax--enum {
    color: var(--color-for-local-variable);
  }

  &.syntax--variable {
    color: var(--color-for-symbol);
  }

  // This is inside a query field (not schema/type definition, not query(...))
  &.syntax--meta.syntax--arguments {
    // field(**name**: **$var**) {
    .syntax--variable {
      color: var(--color-for-local-variable);
    }
    // field(**name**: $var) {
    .syntax--arguments.syntax--variable {
      color: var(--color-for-symbol);
    }
  }
  // query(**$var**: "value") {
  &.syntax--meta.syntax--variables .syntax--variable {
    color: var(--color-for-local-variable);
  }
  &.syntax--fragment {
    color: var(--color-for-local-variable);
  }

  .syntax--keyword.syntax--type + .syntax--support.syntax--type {
    color: var(--color-for-local-variable)
  }
}

// NOTE Bracket matcher more obvious
.bracket-matcher .region {
  border: 1px white solid;
  position: absolute;
  border-radius: 1px;
  opacity: .5;
}



//
// .syntax--keyword {
//   color: @purple;
//
//
//   &.syntax--operator {
//     color: @syntax-text-color;
//   }
//
//   &.syntax--other.syntax--special-method {
//     color: @blue;
//   }
//
//   &.syntax--other.syntax--unit {
//     color: @orange;
//   }
// }
//
//
// .syntax--constant {
//   color: @orange;
//
//   &.syntax--character.syntax--escape {
//     color: @cyan;
//   }
//
//   &.syntax--numeric {
//     color: @orange;
//   }
//
//   &.syntax--other.syntax--color {
//     color: @cyan;
//   }
//
//   &.syntax--other.syntax--symbol {
//     color: @green;
//   }
// }
//
// .syntax--invalid.syntax--illegal {
//   background-color: @red;
//   color: @syntax-background-color;
// }

// .syntax--quoted {
//   color: @green;
//
//
//   &.syntax--regexp {
//     color: @cyan;
//
//     .syntax--source.syntax--ruby.syntax--embedded {
//       color: @orange;
//     }
//   }
//
//   &.syntax--other.syntax--link {
//     color: @red;
//   }
// }
// .syntax--support {
//   &.syntax--class {
//     color: @light-orange;
//   }
//
//   &.syntax--function  {
//     color: @cyan;
//
//     &.syntax--any-method {
//       color: @blue;
//     }
//   }
// }

// .syntax--entity {
//   color: red;
// }
// .syntax--entity {
//   &.syntax--name.syntax--function {
//     color: @blue;
//   }
//   &.syntax--name.syntax--type {
//     color: @light-orange;
//     text-decoration: underline;
//   }
//
//   &.syntax--other.syntax--inherited-class {
//     color: @green;
//   }
//   &.syntax--name.syntax--class, &.syntax--name.syntax--type.syntax--class {
//     color: @light-orange;
//   }
//
//   &.syntax--name.syntax--section {
//     color: @blue;
//   }
//
//   &.syntax--name.syntax--tag {
//     color: @red;
//     text-decoration: underline;
//   }
//
//   &.syntax--other.syntax--attribute-name {
//     color: @orange;
//
//     &.syntax--id {
//       color: @blue;
//     }
//   }
// }
//
// .syntax--meta {
//   &.syntax--class {
//     color: @light-orange;
//   }
//
//   &.syntax--link {
//     color: @orange;
//   }
//
//   &.syntax--require {
//     color: @blue;
//   }
//
//   &.syntax--selector {
//     color: @purple;
//   }
//
//   &.syntax--separator {
//     background-color: @gray;
//     color: @syntax-text-color;
//   }
// }
//
// .syntax--none {
//   color: @syntax-text-color;
// }
//
// .syntax--markup {
//   &.syntax--bold {
//     color: @orange;
//     font-weight: bold;
//   }
//
//   &.syntax--changed {
//     color: @purple;
//   }
//
//   &.syntax--deleted {
//     color: @red;
//   }
//
//   &.syntax--italic {
//     color: @purple;
//     font-style: italic;
//   }
//
//   &.syntax--heading .syntax--punctuation.syntax--definition.syntax--heading {
//     color: @blue;
//   }
//
//   &.syntax--inserted {
//     color: @green;
//   }
//
//   &.syntax--list {
//     color: @red;
//   }
//
//   &.syntax--quote {
//     color: @orange;
//   }
//
//   &.syntax--raw.syntax--inline {
//     color: @green;
//   }
// }
//
// .syntax--source.syntax--gfm .syntax--markup {
//   -webkit-font-smoothing: auto;
//   &.syntax--heading {
//     color: @green;
//   }
// }


// Mini editor

atom-text-editor[mini] .scroll-view {
  padding-left: 1px;
}
